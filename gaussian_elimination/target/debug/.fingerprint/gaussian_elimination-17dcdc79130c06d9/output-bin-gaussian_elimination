{"message":"`main` function not found in crate `gaussian_elimination`","code":{"code":"E0601","explanation":"No `main` function was found in a binary crate.\n\nTo fix this error, add a `main` function:\n\n```\nfn main() {\n    // Your program will start here.\n    println!(\"Hello world!\");\n}\n```\n\nIf you don't know the basics of Rust, you can look at the\n[Rust Book][rust-book] to get started.\n\n[rust-book]: https://doc.rust-lang.org/book/\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":100,"byte_end":2830,"line_start":4,"line_end":82,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"const SIZE: usize = 6;","highlight_start":1,"highlight_end":23},{"text":" ","highlight_start":1,"highlight_end":2},{"text":"pub fn eliminate(mut system: [[f32; SIZE+1]; SIZE]) -> Option<Vec<f32>> {","highlight_start":1,"highlight_end":74},{"text":"    // produce the row reduced echelon form","highlight_start":1,"highlight_end":44},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // for every row...","highlight_start":1,"highlight_end":24},{"text":"    for i in 0..SIZE-1 {","highlight_start":1,"highlight_end":25},{"text":"        // for every column in that row...","highlight_start":1,"highlight_end":43},{"text":"        for j in i..SIZE-1 {","highlight_start":1,"highlight_end":29},{"text":"            if system[i][i] == 0f32 {","highlight_start":1,"highlight_end":38},{"text":"                continue;","highlight_start":1,"highlight_end":26},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                // reduce every element under that element to 0","highlight_start":1,"highlight_end":64},{"text":"                let factor = system[j + 1][i] as f32 / system[i][i] as f32;","highlight_start":1,"highlight_end":76},{"text":"                for k in i..SIZE+1 {","highlight_start":1,"highlight_end":37},{"text":"                    // potential optimization: set every element to zero, instead of subtracting","highlight_start":1,"highlight_end":97},{"text":"                    // i think subtraction helps showcase the process better","highlight_start":1,"highlight_end":77},{"text":"                    system[j + 1][k] -= factor * system[i][k] as f32;","highlight_start":1,"highlight_end":70},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":" ","highlight_start":1,"highlight_end":2},{"text":"    // produce gaussian eliminated array","highlight_start":1,"highlight_end":41},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // the process follows a similar pattern","highlight_start":1,"highlight_end":45},{"text":"    // but this one reduces the upper triangular ","highlight_start":1,"highlight_end":50},{"text":"    // elements","highlight_start":1,"highlight_end":16},{"text":"    for i in (1..SIZE).rev() {","highlight_start":1,"highlight_end":31},{"text":"        if system[i][i] == 0f32 {","highlight_start":1,"highlight_end":34},{"text":"            continue;","highlight_start":1,"highlight_end":22},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            for j in (1..i+1).rev() {","highlight_start":1,"highlight_end":38},{"text":"                let factor = system[j - 1][i] as f32 / system[i][i] as f32;","highlight_start":1,"highlight_end":76},{"text":"                for k in (0..SIZE+1).rev() {","highlight_start":1,"highlight_end":45},{"text":"                    system[j - 1][k] -= factor * system[i][k] as f32;","highlight_start":1,"highlight_end":70},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":" ","highlight_start":1,"highlight_end":2},{"text":"    // produce solutions through back substitution","highlight_start":1,"highlight_end":51},{"text":"    let mut solutions: Vec<f32> = vec![];","highlight_start":1,"highlight_end":42},{"text":"    for i in 0..SIZE {","highlight_start":1,"highlight_end":23},{"text":"        if system[i][i] == 0f32 {","highlight_start":1,"highlight_end":34},{"text":"            return None;","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        else {","highlight_start":1,"highlight_end":15},{"text":"            system[i][SIZE] /= system[i][i] as f32;","highlight_start":1,"highlight_end":52},{"text":"            system[i][i] = 1f32;","highlight_start":1,"highlight_end":33},{"text":"            println!(\"X{} = {}\", i + 1, system[i][SIZE]);","highlight_start":1,"highlight_end":58},{"text":"            solutions.push(system[i][SIZE])","highlight_start":1,"highlight_end":44},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    return Some(solutions);","highlight_start":1,"highlight_end":28},{"text":"}","highlight_start":1,"highlight_end":2},{"text":" ","highlight_start":1,"highlight_end":2},{"text":"#[cfg(test)]","highlight_start":1,"highlight_end":13},{"text":"mod tests {","highlight_start":1,"highlight_end":12},{"text":"    use super::*;","highlight_start":1,"highlight_end":18},{"text":"    // sample run of the program","highlight_start":1,"highlight_end":33},{"text":"    #[test]","highlight_start":1,"highlight_end":12},{"text":"    fn eliminate_seven_by_six() {","highlight_start":1,"highlight_end":34},{"text":"        let system: [[f32; SIZE +1]; SIZE] = [","highlight_start":1,"highlight_end":47},{"text":"            [1.00 , 0.00 , 0.00 , 0.00  , 0.00  , 0.00   , -0.01 ] ,","highlight_start":1,"highlight_end":69},{"text":"            [1.00 , 0.63 , 0.39 , 0.25  , 0.16  , 0.10   , 0.61  ] ,","highlight_start":1,"highlight_end":69},{"text":"            [1.00 , 1.26 , 1.58 , 1.98  , 2.49  , 3.13   , 0.91  ] ,","highlight_start":1,"highlight_end":69},{"text":"            [1.00 , 1.88 , 3.55 , 6.70  , 12.62 , 23.80  , 0.99  ] ,","highlight_start":1,"highlight_end":69},{"text":"            [1.00 , 2.51 , 6.32 , 15.88 , 39.90 , 100.28 , 0.60  ] ,","highlight_start":1,"highlight_end":69},{"text":"            [1.00 , 3.14 , 9.87 , 31.01 , 97.41 , 306.02 , 0.02  ]","highlight_start":1,"highlight_end":67},{"text":"        ] ;","highlight_start":1,"highlight_end":12},{"text":"        let solutions = eliminate(system).unwrap();","highlight_start":1,"highlight_end":52},{"text":"        assert_eq!(6, solutions.len());","highlight_start":1,"highlight_end":40},{"text":"        let assert_solns = vec![-0.01, 1.60278, -1.61320, 1.24549, -0.49098, 0.06576];","highlight_start":1,"highlight_end":87},{"text":"        for (ans, key) in solutions.iter().zip(assert_solns.iter()) {","highlight_start":1,"highlight_end":70},{"text":"            if (ans - key).abs() > 1E-4 { panic!(\"Test Failed!\") }","highlight_start":1,"highlight_end":67},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"consider adding a `main` function to `src/main.rs`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0601]\u001b[0m\u001b[0m\u001b[1m: `main` function not found in crate `gaussian_elimination`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:4:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mconst SIZE: usize = 6;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn eliminate(mut system: [[f32; SIZE+1]; SIZE]) -> Option<Vec<f32>> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // produce the row reduced echelon form\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconsider adding a `main` function to `src/main.rs`\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0601`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0601`.\u001b[0m\n"}
